package api

import (
	"errors"
	"log"

	"github.com/kataras/iris"
	uuid "github.com/satori/go.uuid"
	"../helpers"
)


// LinkWith{{.TypeName}}Type ...
func LinkWith{{.TypeName}}Type(api iris.Party) {
	api.Get("/{{.InternalAPIName}}/{id:string}", func(c iris.Context) {
		{{.InternalTypeName}}ID := c.Params().Get("id")
		ID, err := uuid.FromString({{.InternalTypeName}}ID)
		if err != nil {
			log.Println("uuid.FromString(), ", err)
			c.StatusCode(iris.StatusInternalServerError)
			c.JSON(Response{
				Data:  nil,
				Error: err.Error(),
			})
			return
		}

		{{.InternalTypeName}}, err := helpers.Get{{.TypeName}}ByID(ID)
		if err != nil {
			log.Println("Get{{.TypeName}}ByID(), ", err)
			c.StatusCode(iris.StatusInternalServerError)
			c.JSON(Response{
				Data:  nil,
				Error: err.Error(),
			})
		} else {
			c.StatusCode(iris.StatusOK)
			c.JSON(Response{
				Data:  {{.InternalTypeName}},
				Error: nil,
			})
		}

		

	})

	api.Get("/{{.InternalAPIName}}/all", func(c iris.Context) {
		{{.PluralInternalTypeName}}, err := helpers.GetAll{{.PluralTypeName}}()
		if err != nil {
			log.Println("GetAll{{.PluralTypeName}}(), ", err)
			c.StatusCode(iris.StatusInternalServerError)
			c.JSON(Response{
				Data:  nil,
				Error: err.Error(),
			})
		} else {
			c.StatusCode(iris.StatusOK)
			c.JSON(Response{
				Data:  {{.PluralInternalTypeName}},
				Error: nil,
			})
		}

	})

	api.Post("/{{.InternalAPIName}}/create", func(c iris.Context) {
		{{.InternalTypeName}} := new(helpers.{{.TypeName}})
		err := c.ReadForm({{.InternalTypeName}})
		if err != nil {
			log.Println("c.ReadForm(), ", err)
			c.StatusCode(iris.StatusInternalServerError)
			c.JSON(Response{
				Data:  nil,
				Error: err.Error(),
			})
			return
		}

		// If not have Id
		if uuid.Equal({{.InternalTypeName}}.ID, uuid.Nil) {
			newID, err := uuid.NewV4()
			if err != nil {
				log.Println("uuid.NewV4(), ", err)
				c.StatusCode(iris.StatusInternalServerError)
				c.JSON(Response{
					Data:  nil,
					Error: err.Error(),
				})
				return
			}
			{{.InternalTypeName}}.ID = newID
		}

		returned{{.TypeName}}, err := helpers.CreateNew{{.TypeName}}({{.InternalTypeName}})
		if err != nil {
			log.Println("CreateNew{{.TypeName}}(), ", err)
			c.StatusCode(iris.StatusInternalServerError)
			c.JSON(Response{
				Data:  nil,
				Error: err.Error(),
			})
			return
		}

		c.StatusCode(iris.StatusOK)
		c.JSON(Response{
			Data:  returned{{.TypeName}},
			Error: nil,
		})
	})

	api.Post("/{{.InternalAPIName}}/update", func(c iris.Context) {
		{{.InternalTypeName}} := new(helpers.{{.TypeName}})
		err := c.ReadForm({{.InternalTypeName}})
		if err != nil {
			log.Println("c.ReadForm(), ", err)
			c.StatusCode(iris.StatusInternalServerError)
			c.JSON(Response{
				Data:  nil,
				Error: err.Error(),
			})
			return
		}

		// If not have Id
		if uuid.Equal({{.InternalTypeName}}.ID, uuid.Nil) {
			log.Println("Update method needs Id")
			c.StatusCode(iris.StatusInternalServerError)
			c.JSON(Response{
				Data:  nil,
				Error: errors.New("Update method needs Id").Error(),
			})
			return
		}

		updated{{.TypeName}}, err := helpers.Update{{.TypeName}}({{.InternalTypeName}})
		if err != nil {
			log.Println("Update{{.TypeName}}(), ", err)
			c.StatusCode(iris.StatusInternalServerError)
			c.JSON(Response{
				Data:  nil,
				Error: err.Error(),
			})
			return
		}

		c.StatusCode(iris.StatusOK)
		c.JSON(Response{
			Data:  updated{{.TypeName}},
			Error: nil,
		})

	})

	api.Post("/{{.InternalAPIName}}/delete", func(c iris.Context) {
		type IDForm struct {
			ID uuid.UUID `json:"id"`
		}

		idForm := new(IDForm)
		err := c.ReadForm(idForm)
		if err != nil {
			log.Println("c.ReadForm(), ", err)
			c.StatusCode(iris.StatusInternalServerError)
			c.JSON(Response{
				Data:  nil,
				Error: err.Error(),
			})
			return
		}

		returned{{.TypeName}}, err := helpers.Delete{{.TypeName}}ByID(idForm.ID)

		if err != nil {
			c.StatusCode(iris.StatusInternalServerError)
			c.JSON(Response{
				Data:  returned{{.TypeName}},
				Error: err.Error(),
			})
		} else {
			c.StatusCode(iris.StatusOK)
			c.JSON(Response{
				Data:  returned{{.TypeName}},
				Error: nil,
			})
		}

	})
}
